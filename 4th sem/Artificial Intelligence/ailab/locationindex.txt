# Map data
import heapq

graph = {
    'Arad': {'Zerind': 75, 'Sibiu': 140, 'Timisoara': 118},
    'Zerind': {'Arad': 75, 'Oradea': 71},
    'Oradea': {'Zerind': 71, 'Sibiu': 151},
    'Timisoara': {'Arad': 118, 'Lugoj': 111},
    'Dobreta': {'Mehadia': 75, 'Craiova': 120},
    'Lugoj': {'Timisoara': 111, 'Mehadia': 70, 'Dobreta': 75},
    'Mehadia': {'Lugoj': 70, 'Dobreta': 75, 'Craiova': 148},
    'Rimnicu Vilcea': {'Sibiu': 80, 'Pitesti': 97, 'Craiova': 146},
    'Sibiu': {'Arad': 140, 'Oradea': 151, 'Fagaras': 99, 'Rimnicu Vilcea': 80},
    'Fagaras': {'Sibiu': 99, 'Bucharest': 211},
    'Craiova': {'Dobreta': 120, 'Rimnicu Vilcea': 146, 'Pitesti': 138},
    'Pitesti': {'Rimnicu Vilcea': 97, 'Craiova': 138, 'Bucharest': 101},
    'Neamt': {'Iasi': 87},
    'Iasi': {'Neamt': 87, 'Vaslui': 92},
    'Vaslui': {'Iasi': 92, 'Urziceni': 142},
    'Hirsova': {'Urziceni': 98, 'Eforie': 86},
    'Eforie': {'Hirsova': 86},
    'Giurgiu': {'Bucharest': 90},
    'Bucharest': {'Fagaras': 211, 'Pitesti': 101, 'Giurgiu': 90, 'Urziceni': 85},
    'Urziceni': {'Bucharest': 85, 'Vaslui': 142, 'Hirsova': 98}
}

# Straight-line distances for heuristic function
straight_line_distances = {
    'Arad': 366,
    'Bucharest': 0,
    'Craiova': 160,
    'Dobreta': 242,
    'Eforie': 161,
    'Fagaras': 176,
    'Giurgiu': 77,
    'Hirsova': 151,
    'Iasi': 226,
    'Lugoj': 244,
    'Mehadia': 241,
    'Neamt': 234,
    'Oradea': 380,
    'Pitesti': 100,
    'Rimnicu Vilcea': 193,
    'Sibiu': 253,
    'Timisoara': 329,
    'Urziceni': 80,
    'Vaslui': 199,
    'Zerind': 374
}

def heuristic(node, goal):
    return straight_line_distances[node]

def astar(graph, start, goal):
    # Priority queue to store nodes to be explored, with their f-values as the priority
    open_list = [(0, start)]  # Initial f-value is 0
    # Dictionary to store parent nodes
    parents = {}
    # Dictionary to store g-values (cost from start to current node)
    g_values = {node: float('inf') for node in graph}
    g_values[start] = 0

    while open_list:
        _, current_node = heapq.heappop(open_list)  # Pop node with lowest f-value
        if current_node == goal:
            # Reconstruct path
            path = [current_node]
            while current_node in parents:
                current_node = parents[current_node]
                path.append(current_node)
            return path[::-1]  # Return reversed path (from start to goal)

        # Expand current node
        for neighbor, cost in graph[current_node].items():
            # Calculate tentative g-value for neighbor
            tentative_g = g_values[current_node] + cost
            if tentative_g < g_values[neighbor]:
                # Update g-value and parent
                g_values[neighbor] = tentative_g
                f_value = tentative_g + heuristic(neighbor, goal)
                heapq.heappush(open_list, (f_value, neighbor))
                parents[neighbor] = current_node

    return None  # No path found

# Test the A* algorithm
start_node = 'Arad'
goal_node = 'Bucharest'
path = astar(graph, start_node, goal_node)
if path:
    print(f"Shortest path from {start_node} to {goal_node}: {path}")
else:
    print(f"No path found from {start_node} to {goal_node}")

